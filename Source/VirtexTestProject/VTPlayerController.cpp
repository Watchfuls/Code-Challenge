////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  VTPlayerController.cpp
//
// Copyright Gregory Hallam 2021
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "VTPlayerController.h"
#include "Net/UnrealNetwork.h"
#include "VTPawn.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Log
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DECLARE_LOG_CATEGORY_CLASS(VTPlayerControllerLog, All, All);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetLifetimeReplicatedProps
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AVTPlayerController::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const
{
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);

	DOREPLIFETIME(AVTPlayerController, PawnLocation);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AVTPlayerController::AVTPlayerController()
{
	ActionPressed = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SetupPlayerInputComponent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AVTPlayerController::SetupInputComponent()
{
	Super::SetupInputComponent();

	if (
		IsLocalPlayerController() &&
		GetNetMode() != NM_DedicatedServer
		)
	{
		InputComponent->BindAction<FVTInputDelegate>("Up", IE_Pressed, this, &AVTPlayerController::MoveOnLocalClient, EVTDirection::UP);
		InputComponent->BindAction<FVTInputDelegate>("Down", IE_Pressed, this, &AVTPlayerController::MoveOnLocalClient, EVTDirection::DOWN);
		InputComponent->BindAction<FVTInputDelegate>("Left", IE_Pressed, this, &AVTPlayerController::MoveOnLocalClient, EVTDirection::LEFT);
		InputComponent->BindAction<FVTInputDelegate>("Right", IE_Pressed, this, &AVTPlayerController::MoveOnLocalClient, EVTDirection::RIGHT);

		InputComponent->BindAction("Action", IE_Pressed, this, &AVTPlayerController::OnActionPressed);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MoveOnLocalClient
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AVTPlayerController::MoveOnLocalClient(EVTDirection NewDir)
{
	if (
		IsLocalPlayerController() &&
		GetNetMode() != NM_DedicatedServer
		)
	{
		AVTPawn* OwnerPawn = Cast<AVTPawn>(GetPawn());
		if (OwnerPawn)
		{

			FVector NewLocation = OwnerPawn->MovePawn(NewDir);
			MoveOnServer(NewLocation);
		}
		else
		{
			UE_LOG(VTPlayerControllerLog, Log, TEXT("The Local Actor could not be cast to VTPawn"));
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MoveOnServer_Implementation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AVTPlayerController::MoveOnServer_Implementation(FVector NewLoc)
{
	if (GetNetMode() == NM_DedicatedServer)
	{
		AVTPawn* OwnerPawn = Cast<AVTPawn>(GetPawn());
		if (OwnerPawn)
		{
			UE_LOG(VTPlayerControllerLog, Log, TEXT("Moving player %d on server from %s to %s"), GetUniqueID(), *OwnerPawn->GetActorLocation().ToCompactString(), *NewLoc.ToCompactString());
			OwnerPawn->MovePawn(EVTDirection::NONE, NewLoc);
		}
		else
		{
			UE_LOG(VTPlayerControllerLog, Log, TEXT("The Server Actor could not be cast to VTPawn"));
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MoveOnServer_Validate
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AVTPlayerController::MoveOnServer_Validate(FVector NewLocs)
{
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OnActionPressed
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AVTPlayerController::OnActionPressed()
{
	if (ActionPressed != 0)
	{
		++ActionPressed;
	}
}